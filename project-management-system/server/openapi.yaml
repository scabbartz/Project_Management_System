openapi: 3.0.0
info:
  title: Project Management System API
  version: v1.0.0
  description: API for managing projects in the Khelo Tech Unified Sports Portal.
  contact:
    name: Khelo Tech Support
    email: support@khelotech.com

servers:
  - url: http://localhost:3001/api
    description: Local development server

components:
  schemas:
    ProjectStatus:
      type: string
      enum: [Planning, Active, On Hold, Completed, Cancelled]
      description: Current status of the project.
      example: "Active"

    ProjectPriority:
      type: string
      enum: [Low, Medium, High, Critical]
      description: Priority level of the project.
      example: "Medium"

    Project:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid # Or string if using timestamp-based
          description: Unique identifier for the project.
          readOnly: true
        name:
          type: string
          description: Name of the project.
          example: "New Stadium Lighting"
        description:
          type: string
          description: Detailed description of the project.
          example: "Upgrade current stadium lighting to LED."
        startDate:
          type: string
          format: date
          description: Estimated start date of the project.
          example: "2024-08-01"
        endDate:
          type: string
          format: date
          description: Estimated end date of the project.
          example: "2024-12-31"
        scope:
          type: string
          description: Detailed scope of the project.
          example: "Includes purchase and installation of LED lights, excluding electrical system upgrades."
        objectives:
          type: array
          items:
            type: string
          description: List of specific project objectives.
          example: ["Reduce energy consumption by 30%", "Improve lighting quality for night games"]
        deliverables:
          type: array
          items:
            type: string
          description: List of tangible project deliverables.
          example: ["Installed LED lighting system", "Final lighting audit report"]
        status:
          $ref: '#/components/schemas/ProjectStatus'
        priority:
          $ref: '#/components/schemas/ProjectPriority'
        budget:
          type: number
          description: Project budget in currency units.
          example: 50000
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing projects.
          example: ["infrastructure", "lighting", "energy-efficiency"]
        createdBy:
          type: string
          description: ID of the user who created the project.
          example: "user123"
        assignedTo:
          type: array
          items:
            type: string
          description: Array of user IDs assigned to the project.
          example: ["user123", "user456"]
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the project was created.
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of when the project was last updated.
          readOnly: true

    ProjectInput: # Schema for creating/updating projects, omitting readOnly fields like id
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "New Stadium Lighting"
        description:
          type: string
          example: "Upgrade current stadium lighting to LED."
        startDate:
          type: string
          format: date
          example: "2024-08-01"
        endDate:
          type: string
          format: date
          example: "2024-12-31"
        scope:
          type: string
          example: "Includes purchase and installation of LED lights, excluding electrical system upgrades."
        objectives:
          type: array
          items:
            type: string
          example: ["Reduce energy consumption by 30%", "Improve lighting quality for night games"]
        deliverables:
          type: array
          items:
            type: string
          example: ["Installed LED lighting system", "Final lighting audit report"]
        status:
          $ref: '#/components/schemas/ProjectStatus'
        priority:
          $ref: '#/components/schemas/ProjectPriority'
        budget:
          type: number
          example: 50000
        tags:
          type: array
          items:
            type: string
          example: ["infrastructure", "lighting", "energy-efficiency"]
        assignedTo:
          type: array
          items:
            type: string
          example: ["user123", "user456"]

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          format: email
          description: Email address of the user.
        role:
          type: string
          enum: [Admin, Manager, Team Member, Viewer]
          description: Role of the user in the system.
        avatar:
          type: string
          description: URL to user's avatar image.
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the user was created.
        lastLogin:
          type: string
          format: date-time
          description: Timestamp of user's last login.

    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
        code:
          type: integer
          format: int32
          description: An optional internal error code.

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request payload or parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Authentication information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' # Example, might need specific schema
    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /projects:
    get:
      summary: List all projects
      tags:
        - Projects
      operationId: listProjects
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProjectStatus'
          description: Filter projects by status
        - name: priority
          in: query
          schema:
            $ref: '#/components/schemas/ProjectPriority'
          description: Filter projects by priority
        - name: tag
          in: query
          type: string
          description: Filter projects by tag
      responses:
        '200':
          description: A list of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new project
      tags:
        - Projects
      operationId: createProject
      requestBody:
        description: Project object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Project created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}:
    parameters:
      - name: projectId
        in: path
        required: true
        description: ID of the project to operate on.
        schema:
          type: string
          # format: uuid # if using UUIDs
    get:
      summary: Get a project by ID
      tags:
        - Projects
      operationId: getProjectById
      responses:
        '200':
          description: Successfully retrieved project details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an existing project
      tags:
        - Projects
      operationId: updateProject
      requestBody:
        description: Project object with updated fields.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Project updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a project by ID
      tags:
        - Projects
      operationId: deleteProject
      responses:
        '204':
          description: Project deleted successfully. No content.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Future endpoints for user management
  /users:
    get:
      summary: List all users
      tags:
        - Users
      operationId: listUsers
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      tags:
        - Users
      operationId: createUser
      requestBody:
        description: User object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
